- organize your projects so that your source code and class files are not in the same directory

- A standard organization structure is to create a project directory and then put a source directory and a classes directory
inside the project directory

- Organizinf your classes into packages prevent naming conflicts with other classes, if you prepend your reverse domain
name on to the front of the class name

- To put a class in a package, put a statement at the top of the source code file, before any import statements

	package com.wickedlysmart
	
- To be in a package, a class must be in a directoy structure that exactly matches the package structure. for a class, com.wickedlysmart.Fpp, the 
Foo class must be in a directoy named wickedlysmart, whihc is in a directoy named com

- To make your compiled class land in the correct package directory structure under the classes directory, use the -d compiler flag:
	
	% cd dource
	% javac -d../classes com/wickedlysmart/Foo.java
	
- to run your code, cd to the classes directory, and give the fully qualified name of your class
	
	%cd classes
	% java com.wickedlysmart.foo

- you can bundle your classes into JAR files. JAR is based on the pkzip format

- You can make an executable JAR file by putting a manifest.txt file into the JAR that states which class has the main() method. To
create a manifest file, make a text file with an entry like the following (i.e)
	
	Main-Class: com.wickedlysmart.Foo

- be sure to hit return key after typing the Main-Class line, or your manifest file may not work

- to create a JAR file, type
	
	jar -cvfm manifest.txt myJar.jar com

- The entire package directory structure (and only the directories matching the package) must be immediately inside the JAR file

- to run an executable JAR file, type
	
	java -jar MyJar.jar